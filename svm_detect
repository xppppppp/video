import argparse
import cv2
import numpy as np
from os.path import join
datapath="/images/"
def path(cls,i):
    return "%s/%s%d.pgm"  %(datapath,cls,i+1)
pos, neg="pos-", "neg-"
detect=cv2.xfeatures2d.SIFT_create()
extract=cv2.xfeatures2d.SIFT_create()
flann_params=dict(algorithm =1, trees=5)
flann=cv2.FlannBasedMatcher(flann_params,{})
bows_kmeans_trainer=cv2.BOWKeansTrainer(40)
extract_bow=cv2.BOWImgDescriptorExtractor(extract,flann)
def extract_sift(fn):
    im=cv2.imread(fn,0)
    return extract.compute(im,detect.detect(im))[1]
for i in range(8):
    bows_kmeans_trainer.add(extract_sift(path(pos,i)))
    bows_kmeans_trainer.add(extract_sift(path(neg,i)))
voc=bows_kmeans_trainer.cluster()
extract_bow.setVocabulary(voc)
def bow_features(fn):
    im=cv2.imread(fn,0)
    return extract_bow.compute(im,detect.detect(im))
traindata,trainlabels=[],[]
for i in range(20):
    traindata.extend(bow_features(path(pos,i)));trainlabels.append(1)
    traindata.extend(bow_features(path(neg,i)));trainlabels.append(-1)
svm=cv2.ml.SVM_create()
svm.train(np.array(traindata),cv2.ml.ROW_SAMPLE,np.array(trainlabels))
def predict(fn):
    f=bow_features(fn);
    p=svm.predict(f)
    print fn,"\t",p[1][0][0]
    return p
not_car=cv2.imread('we.jpg')
not_car_predict=predict('we.jpg')
font =cv2.FONT_HERSHEY_SIMPLEX
if(not_car_predict[1][0][0]==-1.0):
    cv2.putText(not_car,'Car Not Detected',(10,30),font,1,(0,0,255),2,cv2.LINE_AA)
cv2.imshow('BOW + SVM',not_car)
cv2.waitKey(0)
cv2.destroyAllWindows()
